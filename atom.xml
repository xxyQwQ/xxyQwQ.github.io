<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xxyQwQ</title>
  
  
  <link href="https://xxyqwq.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxyqwq.github.io/"/>
  <updated>2022-08-29T09:57:28.653Z</updated>
  <id>https://xxyqwq.github.io/</id>
  
  <author>
    <name>xxyQwQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【题解】ACMOJ 1485 单调栈</title>
    <link href="https://xxyqwq.github.io/2022/08/29/acmoj1485/"/>
    <id>https://xxyqwq.github.io/2022/08/29/acmoj1485/</id>
    <published>2022-08-29T07:41:55.000Z</published>
    <updated>2022-08-29T09:57:28.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1485">ACMOJ - 1485 - 纯真丁一郎</a></p><p>给出一列 $n$ 个<strong>互不相同</strong>的数字 $a_1,a_2,\dots ,a_n$，定义一对 $i,j$ 满足性质当且仅当 $a_i,a_j$ 大于它们之间的所有数字 $a_{i+1},a_{i+2},\dots ,a_{j-1}$</p><p><strong>子问题1</strong>：试求满足性质的数对总数</p><p><strong>子问题2</strong>：给出 $m$ 次询问，每次限定 $i$ 范围为 $[l,r]$，但 $j$ 不限，求此时满足性质的数对总数</p><h3 id="时间复杂度要求"><a href="#时间复杂度要求" class="headerlink" title="时间复杂度要求"></a>时间复杂度要求</h3><p>虽然 $n,m\leq 10^6$ ，但要求实现 $O(n+m)$ 的算法</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>时间复杂度要求已经明示线性解法了，我们大胆猜测本题正解是<strong>单调队列/单调栈</strong></p><p>线性复杂度表明，对于每次询问我们要实现 $O(1)$ 查询，那么方案数一定满足<strong>可加性</strong>，所以要想办法求出：对于每个取定的位置 $i$ ，有多少相应的 $j\in[1,n]$ ，使得 $i,j$ 满足性质（记为 $v[i]$)</p><p>现在考虑 $v[i]$ 数组的求解，我们不妨先考虑 $a_i$ 的左侧，$a_1,a_2,\dots ,a_{i-1}$ 中哪些数与 $a_i$ 满足性质，不难发现以下<strong>特征</strong>：</p><ul><li>$a_i$ 以左第一个比它大的数 $a_p$ 会“<strong>遮挡</strong>”住所有 $a_p$ 左侧的数，即 $a_1,a_2,\dots ,a_{p-1}$ 不会对方案数产生贡献</li><li>若 $a_i$ 左侧两数 $a_m,a_n$ 满足 $m&lt;n$ 且 $a_m&lt;a_n$，则 $a_n$ 会“<strong>遮挡</strong>”住 $a_m$，换言之，对于单调增加的子列 $a_s,a_{s+1},\dots ,a_t$，只有最右边的 $a_t$ 产生贡献</li></ul><p>以上两个特征对于问题求解的简化至关重要，它告诉我们计算 $v[i]$ 时，不考虑：</p><ul><li>“<strong>过大</strong>”的数，即 $a_p$ 以左的数</li><li>“<strong>过小</strong>”的数，即已经被自身右侧其他数“遮挡”的数</li></ul><p>于是我们只需要维护一个<strong>单调栈</strong>，它满足从栈底到栈顶的元素<strong>单调递减</strong>，算法流程如下：</p><ul><li>让 $i$ 遍历 $1,2,\dots ,n$</li><li>把栈顶部所有小于 $a[i]$ 的数全部弹出，每弹出一个数，$v[i]+1$ （这些数都会产生贡献)</li><li>如果栈仍然非空，贡献再 $+1$（左侧第一个大于 $a[i]$ 的元素也会产生贡献）</li><li>将 $a[i]$ 压入栈中</li></ul><p>完成上述算法后，$v[i]$ 中已经得到了 $a_i$ 左侧能与之满足性质的匹配数</p><p>对于右侧，我们从右至左，完全对称地执行上述算法，即可得到相应的匹配数</p><p>正确求解 $v[i]$ 数组后，我们计算其前缀和 $r[i]$，对于每次询问 $x,y$ ，答案即为 $\sum \limits _{k=x}^y v[k]=r[y]-r[x-1]$，即可实现 $O(1)$ 查询</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li>题目允许 $i=j$ ，因此 $a_i$ 与<strong>自身</strong>的匹配也要计算一次贡献</li><li>前缀和数组类型应当为<code>long long</code>，避免求和时溢出<code>int</code>范围</li><li>完成左侧方案数的计算后应当将栈清空</li><li>对栈操作时刻注意<strong>判空</strong></li><li>请学会高效的读入方式，<code>cin</code>容易直接超时</li></ol><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>为什么上述算法流程包含两重循环，但复杂度是 $O(n)$ 呢？</p><p>我们注意到对于每个 $a_i$，<strong>至多</strong>只会发生一次入栈，一次出栈，因此第二重循环的操作次数上限为 $2n$，请读者仔细体会</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------- 以下为链表栈的实现，可以忽略 ----------</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stack</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">top</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span> : <span class="keyword">public</span> Stack&lt;ElementType&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">StackNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        ElementType data;</span><br><span class="line">        StackNode *next;</span><br><span class="line">        <span class="built_in">StackNode</span>() : <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">StackNode</span>(<span class="type">const</span> ElementType &amp;_data, StackNode *_next = <span class="literal">nullptr</span>) : <span class="built_in">data</span>(_data), <span class="built_in">next</span>(_next) &#123;&#125;</span><br><span class="line">        ~<span class="built_in">StackNode</span>() &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    StackNode *head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedStack</span>();</span><br><span class="line">    ~<span class="built_in">LinkedStack</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">top</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">LinkedStack&lt;ElementType&gt;::<span class="built_in">LinkedStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">LinkedStack&lt;ElementType&gt;::~<span class="built_in">LinkedStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">bool</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">empty</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> head == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">push</span>(<span class="type">const</span> ElementType &amp;element)</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="keyword">new</span> <span class="built_in">StackNode</span>(element, head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType LinkedStack&lt;ElementType&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> Stack is already empty!;</span><br><span class="line">    StackNode *temp = head;</span><br><span class="line">    ElementType value = temp-&gt;data;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> temp;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType LinkedStack&lt;ElementType&gt;::<span class="built_in">top</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> Stack is already empty!;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">    StackNode *temp;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------- 以上为链表栈的实现，可以忽略 ----------</span></span><br><span class="line"></span><br><span class="line">LinkedStack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> r[SIZE]; <span class="comment">// Notice the summary can exceed range of int</span></span><br><span class="line"><span class="type">int</span> v[SIZE], h[SIZE], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(%d%d, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v[i] = <span class="number">1</span>; <span class="comment">// Stand at the same position</span></span><br><span class="line">        <span class="built_in">scanf</span>(%d, &amp;h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="comment">// Count on the left side</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; h[s.<span class="built_in">top</span>()] &lt; h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            v[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">            v[i]++;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) <span class="comment">// Clear stack for next direction</span></span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    s.<span class="built_in">push</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i; i--) <span class="comment">// Count on the right side</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; h[s.<span class="built_in">top</span>()] &lt; h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            v[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">            v[i]++;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// Calculate prefix summary to accelerate</span></span><br><span class="line">        r[i] = r[i - <span class="number">1</span>] + v[i];</span><br><span class="line">    <span class="built_in">printf</span>(%lld\n, r[n]); <span class="comment">// r[n] is the total summary</span></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(%d%d, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(%lld\n, r[y] - r[x - <span class="number">1</span>]); <span class="comment">// Summary from v[x] to v[y] is r[y] - r[x - 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xxyqwq.github.io/2022/08/29/hello-world/"/>
    <id>https://xxyqwq.github.io/2022/08/29/hello-world/</id>
    <published>2022-08-29T03:23:48.719Z</published>
    <updated>2022-08-29T03:23:48.719Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
