<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xxyQwQ</title>
  
  
  <link href="https://xxyqwq.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxyqwq.github.io/"/>
  <updated>2022-09-26T05:52:00.350Z</updated>
  <id>https://xxyqwq.github.io/</id>
  
  <author>
    <name>xxyQwQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【题解】ACMOJ 1033 求行列式</title>
    <link href="https://xxyqwq.github.io/2022/09/26/acmoj-1033/"/>
    <id>https://xxyqwq.github.io/2022/09/26/acmoj-1033/</id>
    <published>2022-09-26T04:58:19.000Z</published>
    <updated>2022-09-26T05:52:00.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1033">ACMOJ - 1033 - 行列式求值</a></p><p>求 $n$ 阶行列式 $\begin{vmatrix} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\<br>a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\end{vmatrix}$ 的值，保证 $n\leq 10$ 且答案在<code>int</code>范围内</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>行列式的求解有多种方法，具体参见《线性代数》教材</p><p>此处介绍以下三种方法：</p><ul><li><strong>全排列法</strong>：利用行列式的全排列定义直接计算</li><li><strong>余子式法</strong>：利用行列式的按行展开性质递归计算</li><li><strong>高斯消元</strong>：利用初等变换将行列式化为上三角阵简化计算</li></ul><h3 id="全排列法"><a href="#全排列法" class="headerlink" title="全排列法"></a>全排列法</h3><p>设 $A=(a_{ij})_{n\times n}\in \mathbb{K}^{n\times n}$，则 $|A|=\sum \limits _{j_1j_2\dots j_n}(-1)^{\tau(j_1j_2\dots j_n)}a_{1j_1}a_{2j_2}\dots a_{nj_n}$</p><p>利用<code>std::next_permutation</code>函数构造 $1,2,\dots ,n$ 的全排列，借助函数统计逆序对数，完成计算</p><p>时间复杂度为 $O(n^2\cdot n!)$，利用分治求逆序对可以优化到 $O(n\log n\cdot n!)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">15</span>][<span class="number">15</span>], p[<span class="number">15</span>], n, answer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">invertion</span><span class="params">(<span class="type">int</span> v[], <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">            <span class="keyword">if</span> (v[i] &gt; v[j])</span><br><span class="line">                r++;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        p[i] = i;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> term = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            term *= a[i][p[i]];</span><br><span class="line">        term *= (<span class="built_in">invertion</span>(p, n) &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        answer += term;</span><br><span class="line">    &#125; <span class="keyword">while</span> (std::<span class="built_in">next_permutation</span>(p + <span class="number">1</span>, p + n + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, answer);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="余子式法"><a href="#余子式法" class="headerlink" title="余子式法"></a>余子式法</h3><p>设 $D=|a_{ij}|_{n\times n}$，则 $D=\sum \limits _{j=1}^na_{1j}A_{1j}$，其中 $A_{1j}$ 为 $D$ 的代数余子式</p><p>为实现递归计算，我们动态开辟数组，并且将二维数组压缩至一维，即构造映射 $a_{ij}\rightarrow a_{in+j}$，以此解决函数传参问题</p><p>时间复杂度为 $O(n^2\cdot n!)$，实际运行快于全排列法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">105</span>], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">det</span><span class="params">(<span class="type">int</span> *v, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> *v;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt; k; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> *s = <span class="keyword">new</span> <span class="type">int</span>[(k - <span class="number">1</span>) * (k - <span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k - <span class="number">1</span>; j++)</span><br><span class="line">                *(s + i * (k - <span class="number">1</span>) + j) = *(v + (i + <span class="number">1</span>) * k + (j &lt; p ? j : (j + <span class="number">1</span>)));</span><br><span class="line">        r += ((p &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>) * *(v + p) * <span class="built_in">det</span>(s, k - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">delete</span>[] s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i * n + j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">det</span>(a, n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><ul><li>依次遍历第 $i=1,2,\dots ,n$ 行，将 $a_{ii}$ 作为主元</li><li>依次遍历第 $j=i+1,i+2,\dots ,n$ 行，通过初等变换将 $a_{ji}$ 消为 $0$</li><li>特别地，若 $a_{ii}=0$，则遍历 $j=i+1,i+2,\dots ,n$ 寻找 $a_{ji}\neq 0$，并将第 $i$ 行与第 $j$ 行交换<br>（<strong>每次交换两行会使结果的正负性反转</strong>）</li><li>若 $a_{ji}$ 全为 $0$，行列式的值即为 $0$</li><li>消元完成得到上三角阵 $D’$，其对角线元素乘积即为行列式的结果</li></ul><p>时间复杂度为 $O(n^3)$，远优于前两种方法，但存在浮点数精度的局限性，代码实现中需要思考如下问题：</p><ul><li>如何判定两个浮点数相等？</li><li>输出结果是否可以强制转换为整数？</li><li>如果不行，应该怎么做？</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> a[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(x - y) &lt; eps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T &amp;x, T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp = x;</span><br><span class="line">    x = y, y = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">determination</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">equal</span>(a[i][i], <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">equal</span>(a[j][i], <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (j == n + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            r *= <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">                <span class="built_in">swap</span>(a[i][k], a[j][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> p = -(a[j][i] / a[i][i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= n; k++)</span><br><span class="line">                a[j][k] += p * a[i][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        r *= a[i][i];</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">regularize</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> y = <span class="built_in">fabs</span>(x);</span><br><span class="line">    <span class="keyword">return</span> (x &gt;= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>) * <span class="built_in">int</span>(y + <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="type">double</span> result = <span class="built_in">determination</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">regularize</span>(result));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1014 差分序列</title>
    <link href="https://xxyqwq.github.io/2022/09/25/acmoj-1014/"/>
    <id>https://xxyqwq.github.io/2022/09/25/acmoj-1014/</id>
    <published>2022-09-25T14:17:47.000Z</published>
    <updated>2022-09-25T15:02:53.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1014">ACMOJ - 1014 - 数列操作</a></p><p>给出两个整数序列 $a_1,a_2,\dots ,a_n$ 和 $b_1,b_2,\dots ,b_n$，对 $\{ a_n\}$ 存在如下两种操作：</p><ul><li>将某个区间的数全部 $+1$</li><li>将某个区间的数全部 $-1$</li></ul><p>试求至少经过多少次操作可以将序列 $\{ a_n\}$ 变为 $\{ b_n\}$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>事实上，通过等价变换，可以使问题大大简化</p><p>首先，我们并不关心 $\{ a_n\}$ 和 $\{ b_n\}$ 具体的数值，影响问题答案的是两者的差异，因此我们对两序列作差，即令 $c_n=a_n-b_n$，此时我们只需要对 $\{ c_n\}$ 进行同样的操作，使得 $\forall i=1,2,\dots ,n$ 都有 $c_i=0$</p><p>现在我们引入<strong>差分序列</strong>的概念</p><blockquote><p>对于序列 $x_1,x_2,\dots ,x_n$，特别规定 $x_0=0$，令 $y_n=x_n-x_{n-1}$ 可以得到新序列 $y_1,y_2,\dots ,y_n$，则 $\{ y_n\}$ 记为 $\{ x_n\}$ 的<strong>差分序列</strong>，相应地，$\{ x_n\}$ 记为 $\{ y_n\}$ 的<strong>前缀和序列</strong></p></blockquote><p>差分与前缀和是一对<strong>互逆</strong>的序列变换，在<strong>静态</strong>的区间求和与区间修改问题中，可以将单次操作的复杂度降低为 $O(1)$</p><p>引入上述概念后，我们重新审视问题</p><p>对序列 $\{ c_n\}$ 作差分，得到差分序列 $\{ d_n\}$，则 $d_i$ 表示原序列中后一项与前一项的差值，我们将原序列中区间 $c_i,c_{i+1},\dots ,c_j$ 全部 $+1$，相当于在差分序列中令 $d_i+1$，并令 $d_{j+1}-1$，该等价性可以通过求前缀和的方式进行验证</p><p>至此，问题已经简化为：</p><blockquote><p>已知序列 $d_1,d_2,\dots ,d_n$，每次选取 $i\leq j$，可以令 $d_i+1,d_{j+1}-1$ 或 $d_i-1,d_{j+1}+1$，求将 $\{ d_n\}$ 全部变为 $0$ 的最小操作次数</p></blockquote><p>不难想到贪心策略，每次选取正负性相反的一对 $d_i,d_{j+1}$，其中正数 $-1$，负数 $+1$，最终无法配对的数字与 $d_{n+1}$ 相消（相当于在原序列中，操作该数之后的整个区间）</p><p>因此，最终答案即为 $\max \left \{ \sum \limits _{d_i&gt;0} |d_i|,\ \sum \limits _{d_i&lt;0} |d_i| \right \}$，其正确性不难验证，算法的时间复杂度为 $O(n)$</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li>目标要使所有的 $d_i=0$，因此 $d_1$ 也需要被考虑</li><li>求和变量应当使用<code>long long</code>类型，避免溢出</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">LL p, q;</span><br><span class="line"><span class="type">int</span> a[NMAX], n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T result = <span class="built_in">T</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(word))</span><br><span class="line">        sign |= (word == <span class="string">&#x27;-&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(word))</span><br><span class="line">        result = result * <span class="number">10</span> + <span class="built_in">T</span>(word - <span class="string">&#x27;0&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    value = sign ? -result : result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Ts&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value, Ts &amp;...remain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(value);</span><br><span class="line">    <span class="built_in">read</span>(remain...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">read</span>(x), a[i] -= x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">            p += x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            q -= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, p &gt; q ? p : q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1572 二分图</title>
    <link href="https://xxyqwq.github.io/2022/08/30/acmoj-1572/"/>
    <id>https://xxyqwq.github.io/2022/08/30/acmoj-1572/</id>
    <published>2022-08-30T07:33:13.000Z</published>
    <updated>2022-08-30T08:31:02.836Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1572">ACMOJ - 1572 - 填满棋盘</a></p><p>在 $n$ 行 $m$ 列的棋盘上，挖去 $k$ 个格子，用若干 $1\times 2$ 的棋子<strong>不可重叠</strong>地放置在剩余格子中，问是否可以铺满剩余棋盘</p><p>共有 $T$ 组测试数据（$T\leq 3$），每组数据保证 $n,m\leq 32$，$k&lt;n\times m$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>数据范围很小，即使 $O(n^2m^2)$ 的算法也可以轻松解决</p><p>题目以棋盘为背景，因此很容易想到国际象棋棋盘的黑白交错。我们以相同的方式给棋盘染色，则放置的棋子有如下性质：</p><ul><li>棋子必然位于一对相邻的黑白格上</li><li>只要存在一对相邻的黑白格，必然可以放置一枚棋子</li></ul><p>我们不妨将每个格子视为一个节点，从每个黑色格子出发，向与其相邻的每个白色格子连边，这样便形成了一张二分图。该二分图完美建模了棋子放置的情况，一对匹配恰好代表一枚棋子被放置，二分图的最大匹配恰好代表放置棋子的最大数目，故有结论：</p><ul><li>棋子可以铺满剩余棋盘的充要条件是：对应二分图的最大匹配等于剩余格数的一半</li></ul><p>在此二分图上跑匈牙利算法，即有 $O(n^2m^2)$ 的复杂度，但是也可以考虑复杂度更加优秀的网络流方法</p><p>我们以如下方式构造网络图：</p><ul><li>从超级源点出发，向每个黑色格子连一条容量为 $1$ 的边</li><li>从每个白色格子出发，向超级汇点连一条容量为 $1$ 的边</li><li>从每个黑色格子出发，向与其相邻的每个白色格子连一条容量为 $1$ 的边</li></ul><p>在此网络图上采用 Dinic 算法跑最大流，即为二分图的最大匹配，由于约有 $nm$ 个节点和 $2nm$ 条边，时间复杂度为 $O(m^{\frac{3}{2}}n^{\frac{3}{2}})$（实际上根本跑不满）</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li>由于存在多组测试数据，每次要清空<code>head</code>数组和<code>broken</code>数组，并重置原点和汇点的标号</li><li>每次<code>total</code>要重置且初始值为 $1$（老生常谈）</li><li>数组大小至少为 $32\times 32+2=1026$，我起初开到 $1025$ 发生了一些不可预知的 TLE（悲）</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">1035</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T result = <span class="built_in">T</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(word))</span><br><span class="line">        sign |= (word == <span class="string">&#x27;-&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(word))</span><br><span class="line">        result = result * <span class="number">10</span> + <span class="built_in">T</span>(word - <span class="string">&#x27;0&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    value = sign ? -result : result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Ts&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value, Ts &amp;...remain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(value);</span><br><span class="line">    <span class="built_in">read</span>(remain...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t, w, n;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> <span class="type">_t</span> = <span class="number">0</span>, <span class="type">int</span> _w = <span class="number">0</span>, <span class="type">int</span> _n = <span class="number">0</span>) : <span class="built_in">t</span>(<span class="type">_t</span>), <span class="built_in">w</span>(_w), <span class="built_in">n</span>(_n) &#123;&#125;</span><br><span class="line">&#125; edge[NMAX &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> head[NMAX], start[NMAX], depth[NMAX], T, n, m, k, s, t, total;</span><br><span class="line"><span class="type">bool</span> broken[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++total] = <span class="built_in">Edge</span>(v, w, head[u]);</span><br><span class="line">    head[u] = total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth, <span class="number">0</span>, <span class="built_in">sizeof</span>(depth)), <span class="built_in">memcpy</span>(start, head, <span class="built_in">sizeof</span>(head));</span><br><span class="line">    std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s), depth[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edge[i].n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].t;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].w &amp;&amp; !depth[v])</span><br><span class="line">                depth[v] = depth[u] + <span class="number">1</span>, q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == t || !a)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="type">int</span> f, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> &amp;i = start[u]; i; i = edge[i].n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].t;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].w &amp;&amp; depth[v] == depth[u] + <span class="number">1</span> &amp;&amp; (f = <span class="built_in">dfs</span>(v, std::<span class="built_in">min</span>(a, edge[i].w))))</span><br><span class="line">        &#123;</span><br><span class="line">            r += f, a -= f;</span><br><span class="line">            edge[i].w -= f, edge[i ^ <span class="number">1</span>].w += f;</span><br><span class="line">            <span class="keyword">if</span> (!a)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">        flow += <span class="built_in">dfs</span>(s, INF);</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="built_in">sizeof</span>(head)), <span class="built_in">memset</span>(broken, <span class="number">0</span>, <span class="built_in">sizeof</span>(broken));</span><br><span class="line">    <span class="built_in">read</span>(n, m, k), s = <span class="number">0</span>, t = n * m + <span class="number">1</span>, total = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= k; i++)</span><br><span class="line">        <span class="built_in">read</span>(x, y), broken[x][y] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (broken[i][j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> p = (i - <span class="number">1</span>) * m + j;</span><br><span class="line">            <span class="keyword">if</span> ((i + j) &amp; <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">insert</span>(p, t, <span class="number">1</span>), <span class="built_in">insert</span>(t, p, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">insert</span>(s, p, <span class="number">1</span>), <span class="built_in">insert</span>(p, s, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> _k = <span class="number">0</span>; _k &lt; <span class="number">4</span>; _k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> _i = i + dx[_k], _j = j + dy[_k];</span><br><span class="line">                    <span class="keyword">if</span> (_i &lt; <span class="number">1</span> || _i &gt; n || _j &lt; <span class="number">1</span> || _j &gt; m || broken[_i][_j])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> _p = (_i - <span class="number">1</span>) * m + _j;</span><br><span class="line">                    <span class="built_in">insert</span>(p, _p, <span class="number">1</span>), <span class="built_in">insert</span>(_p, p, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">construct</span>();</span><br><span class="line">        <span class="type">int</span> flow = <span class="built_in">dinic</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, (<span class="number">2</span> * flow == n * m - k) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【文章】我的大一生活</title>
    <link href="https://xxyqwq.github.io/2022/08/29/freshman-life/"/>
    <id>https://xxyqwq.github.io/2022/08/29/freshman-life/</id>
    <published>2022-08-29T11:37:29.000Z</published>
    <updated>2022-08-29T16:14:17.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入学前的暑假"><a href="#入学前的暑假" class="headerlink" title="入学前的暑假"></a>入学前的暑假</h2><p>高考结束后，大家各自奔赴，享受生活。年级里留下约二十人备战强基。</p><p>蹲在教室自习实在是闲不住，我买了一本同济高数自学。这些高数知识看似复杂，实际上并没有很大的思维难度。同济教材的编写逻辑有一种离散的美，索性囫囵吞枣，面向习题学习。所幸配套教辅很不错，扫一遍知识点就可以开始做题。习题大多很简单，偶尔有不会写的就看一眼答案，写完习题知识点也就比较熟练了。</p><p>高考出分，比我预期的好很多，既然大家都考得不好，心里顿时平衡了。THU强基笔试，数学77/100，物化25/100，由于没有评级，作文60/200，直接滚蛋。（THU强基一如既往地黑，没有评级就别去陪跑，不如报PKU强基/享受生活）现在回想起来，强基没过也未必是一件坏事。如果不学数学和信息类专业，我大学以前积攒的所有优势就在顷刻间湮灭了，若是在天坑中摸爬滚打，前途尚未可知，那未来才是暗无天日。</p><p>疫情让我放弃了出游计划，遂闷在家里吃喝玩乐看高数，另给学妹辅导了高三数学，备课教学实在是很有意思的一件事。暑假均摊地看完了高数，心想大学数学不过如此，后来了解到培养计划里是数分，这下成小丑了。（也不能说完全白学，毕竟刷完了两册习题）</p><p>21级交大的军训改在了入学的暑假，于是早早地去报到了。</p><h2 id="致远工科"><a href="#致远工科" class="headerlink" title="致远工科"></a>致远工科</h2><p>入学前，我对交大政策的了解相当匮乏，甚至不知道致远学院的存在。致远工科是在志愿填报的时候签约的，于是填表、面谈，走完流程就莫名其妙地进了。开学前，我听了某新生群的讲座，又刷了很多知乎，才了解到前两年的致远工科在网络上差评如潮。一度想要跑路，最后为了5000的低保抱着试试看的心态留了下来。</p><p>第一学期，致远工科把我的数分、线代、离散都换成了荣誉课，课程难度确实有所加深，更重要的是能感受到身边高手如云，这些同学的刻苦和专注都令我倍感压力。因为这些特殊安排，我大多数的课程并不和本专业的同学一起上，这潜移默化地影响着我的社交范围。</p><p>即使在交大内部，对于致远工科的评价也是毁誉参半，细致的讨论和评述已经不在本文的范围之内。</p><h2 id="数分选拔考"><a href="#数分选拔考" class="headerlink" title="数分选拔考"></a>数分选拔考</h2><p>学期刚开始的几周，我过得相当轻松。C++和离散对我而言并没有什么难度，唯独需要花费精力的就是数分和线代。而老师只会在课后留少量的习题，这些任务很快就可以完成，之后便可以随意摸鱼了。此时，我对大学的考试并没有什么概念，自然也不会产生忧虑。</p><p>对于致远工科的同学而言，数分选拔考并不产生选拔作用，只是老师强制要求参加的一次检测。大概由于是选拔性考试，题目难度偏高，我只考了78/100。虽然只是一次无关紧要的考试，这个分数依旧震撼了我。老师告诉我们，选拔进入荣誉课的分数线是70左右，而我所在教学班的均分不到50。这表明很多致远工科的同学其实并不具备足够的实力（至少在考试排名上）学习荣誉课。当然，也有不少大佬80+甚至90+的分数震撼着我。</p><p>数分选拔考提醒我，仅仅完成老师布置的习题只能混个及格，想要一个不错的分数还需要更多的努力。后来我刷了一些吉米多维奇，但是题量太大劝退，遂改变策略，把教材每一节的习题写完（交大版数分的习题其实并不多），也取得了不错的成绩，小测100/100，期中97/100，期末100/100。当然，这个分数完全不能体现真正的分析功底，只能说掌握了基本的知识和套路。</p><h2 id="图书馆"><a href="#图书馆" class="headerlink" title="图书馆"></a>图书馆</h2><p>图书馆是一个学习效率很高的地方，因此我常常去图书馆写作业。起初我喜欢去主图，因为主图很近，我很懒。我还记得开学第一天去图书馆，坐在我对面的是一个很可爱的女生，她在看陈纪修的《数学分析》，旁边的女生看的是交大版的《线性代数》，于是我立刻猜出了她们的专业，后来我果然在荣誉课上看到了其中一个女生。之后来主图也偶尔能看见熟悉的面孔。这就是致远吧，我如是对自己说。后来我发现，包图的设施更加完善，光线也明亮一些，也难怪包图的生意如此火爆。每次去包图，我都能看到不少致远的同学，其中有一些应该是图书馆的常客。（因为每次都能看见他们）</p><p>我观察到，去图书馆的频率能够反映我的学习状态。开始几周，我几乎每天都会去，毕竟怀着一腔热血进入交大，自然会想着好好努力。然而过了五六周以后，我开始看剧，先是火爆一时的《鱿鱼游戏》，接着去补《权力的游戏》，然后是各种国产剧，往往一看就是一整天。这样的生活节奏渐渐冲淡了学习的热情，于是变得懒散而颓废了。直到十二周左右，我心血来潮和室友Y去包图自习，久违的高效的学习状态重新唤醒了我，一段浑浑噩噩的日子才算结束。</p><h2 id="考试周"><a href="#考试周" class="headerlink" title="考试周"></a>考试周</h2><p>大一上我对期末考试还是很重视的，提前两周就开始搜集复习材料和备考。从结果来看复习效果是不错的，但是过程上有很多无用功。比如花了不少时间复习思修和军理，事实上思修只需要把试卷填满，军理照着隔壁老师的重点半小时就可以复习完。印象比较深的是考数分前，我花了一天把范围内的书后习题全刷了一遍，现在回过头看，不禁感慨当时的效率奇高。（可能是包图有buff加成？）</p><p>考试的时候也是不紧不慢，有些题量很小的考试我都是考场里最后写完的。最大程度地利用时间，在一定程度上减少了犯错丢分的可能性。多数考试都是成竹在胸的感觉，除了大英（完全不会）和线代（战战兢兢）。有些课程出分很慢，但是结果还可以，数分、线代、离散、程设都满绩了也没什么遗憾。</p><h2 id="寒假"><a href="#寒假" class="headerlink" title="寒假"></a>寒假</h2><p>大一上的寒假是极其短暂的，因为此前校历两次莫名其妙的改动，寒假从6周缩水成4周，算上往返掐头去尾只剩三周了。回家之前我买了基电和数据结构的教材，到家先颓废了几天，之后每天看几页书。数据结构比较简单，一周速通，顺便发现教材代码一堆错误，怀疑有些代码根本没跑过。过完春节，一天一章看完了大物第一册，然后寒假就基本结束了，基电看了几页一窍不通，数分也没来得及看（寄）。</p><p>末了参加了高中同学的聚餐，遂匆匆返校。</p><h2 id="自律的前四周"><a href="#自律的前四周" class="headerlink" title="自律的前四周"></a>自律的前四周</h2><p>发现一件怪事，每个学期开始的一段时间总会特别来劲。我计划在平时完成数分的所有书后习题，并且刷完基电辅导书。我发现这样做会搞得自己很忙，但还是坚持下来了，毕竟不刷点题这课属实是学不明白。</p><p>另一方面，大一下的课表比较阴间，集中体现在课程的时间分布不均匀，周三周四只有两节课，但是单周的周一可以撑满早八到晚九，想吃顿饭都赶不上。无奈我个人不能接受翘课，坚持每节课都认真上完。勤奋的日子在事后都显得模糊，只记得这四周仿佛是一晃而过。</p><h2 id="封校"><a href="#封校" class="headerlink" title="封校"></a>封校</h2><p>2022年3月9日是我难以忘却的第十九个生日，我在室友的叫唤中惊醒。我本已盘算了一周如何度过这个生日，或许请室友吃一顿吉姆丽德，也或许打一场酣畅淋漓的篮球赛，然而这些都随着封楼烟消云散了。学校的行动一如既往地悄无声息，当你想逃跑时已经太晚了，于是我们开始了长达一个半月的隔离生活，以及至今未能结束的网课生活。</p><p>最为难熬的应该是封楼之初的那几天，由于事发突然，后勤措施并不能准时到位，吃饭计划也要推迟几个小时。为了防止交叉感染，浴室也关闭了，这一周始终无法洗澡，只得任由自己在寝室里发臭。情况在3月15日有了变化，深夜里老师通知我们全员转运，在凌晨两点我住进了南洋北苑。南洋北苑是闲置的留学生公寓，单人间，独立卫浴。没想到因为疫情在上海体验了一次高档待遇，一番折腾之后我终于在凌晨四点入睡。两周之后，我们又被转运到汉庭酒店进行一周的健康管理，酒店的条件自然是不差，然而缺少适合学习的桌椅，只能躺在床上听网课，另外酒店的床过于柔软令我难以适应。住了一周汉庭酒店，最大的收获是凭借交大邮箱成为了尊贵的华住会铂金会员。</p><p>封校期间，网络成为了与外界沟通的唯一途径。我看到了太多，也明白了太多。形形色色的新闻和消息不断刷新我的世界观，以至于我开始麻木了，或许整个世界也在逐渐麻木。直至现在，无论多么离谱的消息，抑或是谣言出现在网络上，大家也并不觉得离谱，从而便轻易地相信了。永远不要指望所有人都有兼济天下的宽阔胸襟和修齐治平的崇高理想，唯有明哲保身才是第一要务。</p><h2 id="谈谈网课"><a href="#谈谈网课" class="headerlink" title="谈谈网课"></a>谈谈网课</h2><p>线上教学似乎有一种神奇的魔力，让所有人都失去学习的热情。从上网课开始，我身边很多人便彻底开摆了，我自己的学习效率也难免有所降低。</p><p>线下授课模式改为线上，彻底改变了一些课程的授课节奏。以数学分析课程为例，陈克应老师的教学无疑是一流的，板书清晰，节奏适中。由于腾讯会议的共享功能和屏幕大小的限制，只能通过纸上手写和PPT展示授课，这种方式令学生不得不在听课时反复切换界面，大大降低了听课效率。同时，没有了教室内的同学和环境，课堂的氛围感也大打折扣。主客观原因的共同作用下，我时常感到昏昏欲睡，只能挣扎着听完整节课。</p><p>封控的另一弊端体现在生活上。隔离使我只能在一块狭小的空间活动，阻断了所有户外锻炼。身体素质的下降直接导致活力的下降，于是做任何事都会缺乏斗志。学习不是关在屋子里闭门造车就能成功的，它还需要一些其他的活动补充动力，形成良性循环。</p><p>对于自制力差的群体，网课更为致命。没有了严格的时间约束和无形的集体压力，原本鞭策学习的客观因素全然消失，保持勤奋刻苦的状态简直是一种奢求了。</p><h2 id="期末"><a href="#期末" class="headerlink" title="期末"></a>期末</h2><p>临近期末无疑是一件非常痛苦的事情。十五周前后，所有的任务压力潮涌而来。且不论各门课程最后几章难度的提升，光是平时作业和大作业就可以压得我喘不过气。星火培训班也在周末开展培训和小组学习，把时间挤压殆尽。一想到期末考试即将来临，难免有一种黑云压城暗无天日的恐惧感。在那段日子里，我从早到晚都对着电脑写大作业和论文，时常熬到凌晨。在缺乏锻炼的情况下，我的身体耐力几乎到达了极限，所幸最后还是坚持下来。</p><p>我意识到，总有些时候会面临繁重的任务，被巨大的任务量压得喘不过气。而完成它们恰恰是没有捷径的。无法承受者或是自暴自弃，或是情绪崩溃，落得大败而归的结局。我的毅力和决心，正是在一次次磨砺中成长的。对于持久性的任务，不必苛求当日解决，也不必事事苛求完美，知天命尽人事即可。</p><p>考试周，我和室友Y相约每天去东下院自习。譬如数据结构这类课程比较简单，我便直接刷历年的期末真题了事。细细想来，工巧的算法被压缩成无趣的试题，深邃的思想被考成死记硬背的文科题，实在令人遗憾和痛心。而譬如数学分析、电路理论这样的硬骨头，我便大量地刷题，提高熟练度的同时精准查漏补缺，最后留下一些时间刷真题。我深知这学期的学习属实是一种敷衍，老师们大概也知道，因此我的考试成绩竟还说得过去。大物、电路、数电、数据结构都满绩了，唯独遗憾最有把握的数分翻了车，就当是为自己复习时的自以为是付出了代价。</p><p>我想，所谓的努力学习，追求的是高效率和高收益，而不是为了努力本身。盯着书本埋头苦学一整天，有时候还不如出门散散心，再专注地学上几个小时。保持一种轻松愉悦的心态，更容易专注于学习，亦不会因为密集的考试而倍感焦虑。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>高中的班主任曾说：别以为上了大学就轻松了。如今上了大学，深以为然。大一的忙碌远远超出了我的预期，好像一场快节奏的梦。当我以平静的眼光回顾这一年，我庆幸自己尚未迷失。这一年有诸多遗憾，没能多去校外走一走，甚至没能过上一个像样的大学生活，但这些都是琐碎的小事了。人生不如意十之八九，我想我可以算作幸运的。也与读者共勉，不负大学时光。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;入学前的暑假&quot;&gt;&lt;a href=&quot;#入学前的暑假&quot; class=&quot;headerlink&quot; title=&quot;入学前的暑假&quot;&gt;&lt;/a&gt;入学前的暑假&lt;/h2&gt;&lt;p&gt;高考结束后，大家各自奔赴，享受生活。年级里留下约二十人备战强基。&lt;/p&gt;
&lt;p&gt;蹲在教室自习实在是闲不住，我</summary>
      
    
    
    
    <category term="文章" scheme="https://xxyqwq.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="总结" scheme="https://xxyqwq.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1485 单调栈</title>
    <link href="https://xxyqwq.github.io/2022/08/29/acmoj-1485/"/>
    <id>https://xxyqwq.github.io/2022/08/29/acmoj-1485/</id>
    <published>2022-08-29T07:41:55.000Z</published>
    <updated>2022-08-29T15:27:02.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1485">ACMOJ - 1485 - 纯真丁一郎</a></p><p>给出一列 $n$ 个<strong>互不相同</strong>的数字 $a_1,a_2,\dots ,a_n$，定义一对 $i,j$ 满足性质当且仅当 $a_i,a_j$ 大于它们之间的所有数字 $a_{i+1},a_{i+2},\dots ,a_{j-1}$</p><p><strong>子问题1</strong>：试求满足性质的数对总数</p><p><strong>子问题2</strong>：给出 $m$ 次询问，每次限定 $i$ 范围为 $[l,r]$，但 $j$ 不限，求此时满足性质的数对总数</p><h3 id="时间复杂度要求"><a href="#时间复杂度要求" class="headerlink" title="时间复杂度要求"></a>时间复杂度要求</h3><p>虽然 $n,m\leq 10^6$ ，但要求实现 $O(n+m)$ 的算法</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>时间复杂度要求已经明示线性解法了，我们大胆猜测本题正解是<strong>单调队列/单调栈</strong></p><p>线性复杂度表明，对于每次询问我们要实现 $O(1)$ 查询，那么方案数一定满足<strong>可加性</strong>，所以要想办法求出：对于每个取定的位置 $i$ ，有多少相应的 $j\in[1,n]$ ，使得 $i,j$ 满足性质（记为 $v[i]$)</p><p>现在考虑 $v[i]$ 数组的求解，我们不妨先考虑 $a_i$ 的左侧，$a_1,a_2,\dots ,a_{i-1}$ 中哪些数与 $a_i$ 满足性质，不难发现以下<strong>特征</strong>：</p><ul><li>$a_i$ 以左第一个比它大的数 $a_p$ 会“<strong>遮挡</strong>”住所有 $a_p$ 左侧的数，即 $a_1,a_2,\dots ,a_{p-1}$ 不会对方案数产生贡献</li><li>若 $a_i$ 左侧两数 $a_m,a_n$ 满足 $m&lt;n$ 且 $a_m&lt;a_n$，则 $a_n$ 会“<strong>遮挡</strong>”住 $a_m$，换言之，对于单调增加的子列 $a_s,a_{s+1},\dots ,a_t$，只有最右边的 $a_t$ 产生贡献</li></ul><p>以上两个特征对于问题求解的简化至关重要，它告诉我们计算 $v[i]$ 时，不考虑：</p><ul><li>“<strong>过大</strong>”的数，即 $a_p$ 以左的数</li><li>“<strong>过小</strong>”的数，即已经被自身右侧其他数“遮挡”的数</li></ul><p>于是我们只需要维护一个<strong>单调栈</strong>，它满足从栈底到栈顶的元素<strong>单调递减</strong>，算法流程如下：</p><ul><li>让 $i$ 遍历 $1,2,\dots ,n$</li><li>把栈顶部所有小于 $a[i]$ 的数全部弹出，每弹出一个数，$v[i]+1$ （这些数都会产生贡献)</li><li>如果栈仍然非空，贡献再 $+1$（左侧第一个大于 $a[i]$ 的元素也会产生贡献）</li><li>将 $a[i]$ 压入栈中</li></ul><p>完成上述算法后，$v[i]$ 中已经得到了 $a_i$ 左侧能与之满足性质的匹配数</p><p>对于右侧，我们从右至左，完全对称地执行上述算法，即可得到相应的匹配数</p><p>正确求解 $v[i]$ 数组后，我们计算其前缀和 $r[i]$，对于每次询问 $x,y$ ，答案即为 $\sum \limits _{k=x}^y v[k]=r[y]-r[x-1]$，即可实现 $O(1)$ 查询</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li>题目允许 $i=j$ ，因此 $a_i$ 与<strong>自身</strong>的匹配也要计算一次贡献</li><li>前缀和数组类型应当为<code>long long</code>，避免求和时溢出<code>int</code>范围</li><li>完成左侧方案数的计算后应当将栈清空</li><li>对栈操作时刻注意<strong>判空</strong></li><li>请学会高效的读入方式，<code>cin</code>容易直接超时</li></ol><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>为什么上述算法流程包含两重循环，但复杂度是 $O(n)$ 呢？</p><p>我们注意到对于每个 $a_i$，<strong>至多</strong>只会发生一次入栈，一次出栈，因此第二重循环的操作次数上限为 $2n$，请读者仔细体会</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------- 以下为链表栈的实现，可以忽略 ----------</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stack</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">top</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span> : <span class="keyword">public</span> Stack&lt;ElementType&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">StackNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        ElementType data;</span><br><span class="line">        StackNode *next;</span><br><span class="line">        <span class="built_in">StackNode</span>() : <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">StackNode</span>(<span class="type">const</span> ElementType &amp;_data, StackNode *_next = <span class="literal">nullptr</span>) : <span class="built_in">data</span>(_data), <span class="built_in">next</span>(_next) &#123;&#125;</span><br><span class="line">        ~<span class="built_in">StackNode</span>() &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    StackNode *head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedStack</span>();</span><br><span class="line">    ~<span class="built_in">LinkedStack</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">top</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">LinkedStack&lt;ElementType&gt;::<span class="built_in">LinkedStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">LinkedStack&lt;ElementType&gt;::~<span class="built_in">LinkedStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">bool</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">empty</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> head == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">push</span>(<span class="type">const</span> ElementType &amp;element)</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="keyword">new</span> <span class="built_in">StackNode</span>(element, head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType LinkedStack&lt;ElementType&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> Stack is already empty!;</span><br><span class="line">    StackNode *temp = head;</span><br><span class="line">    ElementType value = temp-&gt;data;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> temp;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType LinkedStack&lt;ElementType&gt;::<span class="built_in">top</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> Stack is already empty!;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">    StackNode *temp;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------- 以上为链表栈的实现，可以忽略 ----------</span></span><br><span class="line"></span><br><span class="line">LinkedStack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> r[SIZE]; <span class="comment">// Notice the summary can exceed range of int</span></span><br><span class="line"><span class="type">int</span> v[SIZE], h[SIZE], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(%d%d, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v[i] = <span class="number">1</span>; <span class="comment">// Stand at the same position</span></span><br><span class="line">        <span class="built_in">scanf</span>(%d, &amp;h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="comment">// Count on the left side</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; h[s.<span class="built_in">top</span>()] &lt; h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            v[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">            v[i]++;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) <span class="comment">// Clear stack for next direction</span></span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    s.<span class="built_in">push</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i; i--) <span class="comment">// Count on the right side</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; h[s.<span class="built_in">top</span>()] &lt; h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            v[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">            v[i]++;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// Calculate prefix summary to accelerate</span></span><br><span class="line">        r[i] = r[i - <span class="number">1</span>] + v[i];</span><br><span class="line">    <span class="built_in">printf</span>(%lld\n, r[n]); <span class="comment">// r[n] is the total summary</span></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(%d%d, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(%lld\n, r[y] - r[x - <span class="number">1</span>]); <span class="comment">// Summary from v[x] to v[y] is r[y] - r[x - 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
